{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","utils/format.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","loading","transactions","payload","filter","transaction","_id","error","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","a","axios","get","res","data","response","id","delete","config","headers","post","Provider","value","getTransactions","deleteTransaction","addTransaction","numberWithCommas","x","toString","replace","Balance","amounts","useContext","map","amount","console","log","total","reduce","acc","item","toFixed","IncomeExpenses","income","expense","className","Transaction","sign","text","Math","abs","onClick","TransactionList","useEffect","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ce835d74.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <h2>\r\n            Budget Calculator\r\n        </h2>\r\n    )\r\n}\r\n","// specify app state changes in response to certain actions/context\r\n// way to change your state and send down to component\r\nexport default (state, action) => {\r\n    switch(action.type) {\r\n        case 'GET_TRANSACTIONS':\r\n            return { \r\n                // return whats in our state\r\n                ...state,\r\n                loading: false,\r\n                transactions: action.payload\r\n            }\r\n        case 'DELETE_TRANSACTION':\r\n            return {\r\n                // uses spread operator to send current state\r\n                ...state,\r\n                // filter out anything with that ID\r\n                transactions: state.transactions.filter(transaction => transaction._id !== action.payload)\r\n            }\r\n        case 'ADD_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                // ...state.transaction - this takes out entire array\r\n                // action.payload is the new transaction\r\n                // the new one comes in the payload and is added after the rest of them\r\n                transactions: [...state.transactions, action.payload]\r\n            }\r\n        case 'TRANSACTION_ERROR':\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { createContext, useReducer } from 'react';\r\nimport AppReducer from \"./AppReducer\";\r\nimport axios from 'axios';\r\n\r\n// 1. setup initial state as empty\r\n// 2. function getTransaction gets called in TransactionsList from the backend\r\n// 3. dispatch GET_TRANSACTIONS in our provider/reducer, send data as payload\r\n// 4. in reducer, changes the state to the latest global state\r\n\r\n\r\n// fetch from backend, get transactions state and send down to provider, then grab from component\r\nconst initialState = {\r\n    // { id: 1, text: 'Flower', amount: -20 }\r\n    transactions: [],\r\n    error: null,\r\n    loading: true\r\n}\r\n\r\n// Create context \r\nexport const GlobalContext = createContext(initialState)\r\n\r\n// This is provider component - allows other components to access global state \r\n// we will do all our requests through actions\r\nexport const GlobalProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    async function getTransactions() {\r\n        try {\r\n            const res = await axios.get('/api/v1/transactions');\r\n            // console.log(res.data.data)\r\n\r\n            // dispatch to our reducer - make request, send results to state\r\n            dispatch({\r\n                type: 'GET_TRANSACTIONS',\r\n                payload: res.data.data\r\n            })\r\n        } catch (err) {\r\n            dispatch({\r\n                type: 'TRANSACTION_ERROR',\r\n                payload: err.response.data.error\r\n            })\r\n        }\r\n    }\r\n\r\n    // actions - calls to reducer\r\n    async function deleteTransaction(id) {\r\n        try {\r\n            // deletes from database first , then UI\r\n            await axios.delete(`/api/v1/transactions/${id}`)\r\n            // dispatch an object to our reducer\r\n            dispatch({\r\n                type: 'DELETE_TRANSACTION',\r\n                // sends our ID\r\n                payload: id\r\n            });\r\n        } catch (err){\r\n            dispatch({\r\n                type: 'TRANSACTION_ERROR',\r\n                payload: err.response.data.error\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    // actions - calls to reducer\r\n    async function addTransaction(transaction) {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        try {\r\n            // URL, data, config(headers)\r\n           const res = await axios.post('/api/v1/transactions', transaction, config);\r\n            // dispatch an object to our reducer\r\n            dispatch({\r\n                type: 'ADD_TRANSACTION',\r\n                payload: res.data.data\r\n            });\r\n        } catch (err){\r\n            dispatch({\r\n                type: 'TRANSACTION_ERROR',\r\n                payload: err.response.data.error\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    // provides states, actions to components to its wrapped around\r\n    return (<GlobalContext.Provider value={{\r\n        transactions: state.transactions,\r\n        error: state.error,\r\n        loading: state.loading,\r\n        // Pass functions down into provider\r\n        getTransactions,\r\n        deleteTransaction,\r\n        addTransaction\r\n    }}>\r\n        {children}\r\n    </GlobalContext.Provider>)\r\n}","export function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport { numberWithCommas} from '../utils/format'\r\n\r\nexport const Balance = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    // loop through entire object and add to the amounts array\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n    console.log(amounts)\r\n    // use reduce to add them all together and 2 decimal places\r\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n\r\n    return (\r\n        <>\r\n            <h4>Your Balance</h4>\r\n            <h1>£ {numberWithCommas(total)}</h1>\r\n        </>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport { numberWithCommas } from '../utils/format'\r\n\r\nexport const IncomeExpenses = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n    // anything more than 0(positive numbers)\r\n    // add them together\r\n\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n\r\n    const income = amounts\r\n        .filter(item => item > 0)\r\n        .reduce((acc, item) => (acc += item), 0)\r\n        .toFixed(2);\r\n\r\n    const expense = (\r\n        amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) *\r\n        -1\r\n    ).toFixed(2);\r\n\r\n    return (\r\n        <div className=\"inc-exp-container\">\r\n            <div>\r\n                <h4>Income</h4>\r\n                <p className=\"money plus\">+£{numberWithCommas(income)}</p>\r\n            </div>\r\n            <div>\r\n                <h4>Expense</h4>\r\n                <p className=\"money minus\">-£{numberWithCommas(expense)}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport { numberWithCommas } from '../utils/format'\r\n\r\n// catch props here\r\nexport const Transaction = ({ transaction }) => {\r\n    const { deleteTransaction } = useContext(GlobalContext)\r\n\r\n    const sign = transaction.amount < 0 ? '-' : '+';\r\n\r\n    return (\r\n        <li className={transaction.amount < 0 ? 'minus' : 'plus'}>\r\n            {transaction.text} \r\n            <span>{sign}£{numberWithCommas(Math.abs(transaction.amount))}</span>\r\n            <button className=\"delete-btn\" onClick={() => deleteTransaction(transaction._id)}>x</button>\r\n        </li>\r\n    )\r\n}\r\n","import React, {useContext, useEffect} from 'react'\r\n// pull global state\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport { Transaction } from './Transaction'\r\n\r\n\r\n\r\nexport const TransactionList = () => {\r\n    // pull from global context\r\n    // destructuring array from object\r\n    const {transactions, getTransactions } = useContext(GlobalContext);\r\n    // console.log(transactions)\r\n\r\n    //use useEffect for any HTTP Request\r\n    useEffect(() => {\r\n        getTransactions();\r\n        // use empty array [] to prevent infinite loop\r\n        // prevent console errors\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h3>History</h3>\r\n            <ul className=\"list\">\r\n                {/* map through object */}\r\n                {transactions.map(transaction => (\r\n                    // render transaction component passed as prop\r\n                    <Transaction key={transaction.text} transaction={transaction} />\r\n                ))}\r\n                \r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\n\r\nexport const AddTransaction = () => {\r\n    const [text, setText] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n    const { addTransaction } = useContext(GlobalContext)\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const newTransaction = {\r\n            id: Math.floor(Math.random() * 10000000),\r\n            text,\r\n            amount: +amount\r\n        }\r\n\r\n        addTransaction(newTransaction);\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>Add new transaction</h3>\r\n            <form onSubmit={onSubmit}>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"text\">Text</label>\r\n                    <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Enter text...\" />\r\n                </div>\r\n                <div className=\"form-control\">\r\n                    <label>Amount <br />\r\n                        (negative - expense, positive - income)\r\n                    </label>\r\n                    <input type=\"number\" placeholder=\"Enter amount...\" htmlFor=\"amount\" value={amount} onChange={(e) => setAmount(e.target.value)} />\r\n                </div>\r\n                <button className=\"btn\">Add transaction</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport { Header } from \"./components/Header\"\nimport { Balance } from \"./components/Balance\"\nimport { IncomeExpenses } from \"./components/IncomeExpenses\"\nimport { TransactionList } from \"./components/TransactionList\"\nimport { AddTransaction } from \"./components/AddTransaction\"\n\n// import state\nimport { GlobalProvider } from \"./context/GlobalState\"\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}